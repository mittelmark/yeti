#
# Basic tests for class definition and method/proc access
# ----------------------------------------------------------------------
#   AUTHOR:  Michael J. McLennan
#            Bell Labs Innovations for Lucent Technologies
#            mmclennan@lucent.com
#            http://www.tcltk.com/itcl
#
#      RCS:  $Id: basic.test,v 1.2 1998/09/04 19:10:49 matt Exp $
# ----------------------------------------------------------------------
#               Copyright (c) 1993-1996  Lucent Technologies
# ======================================================================
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies and that
# both that the copyright notice and warranty disclaimer appear in
# supporting documentation, and that the names of Lucent Technologies
# any of their entities not be used in advertising or publicity
# pertaining to distribution of the software without specific, written
# prior permission.
#
# Lucent Technologies disclaims all warranties with regard to this
# software, including all implied warranties of merchantability and
# fitness.  In no event shall Lucent be liable for any special, indirect
# or consequential damages or any damages whatsoever resulting from loss
# of use, data or profits, whether in an action of contract, negligence
# or other tortuous action, arising out of or in connection with the use
# or performance of this software.
# ======================================================================

# Detlef Groth 2021 - adding few fixes for Tcl 8.6 and 8.7
if {[string compare test [info procs test]] == 1} then {source defs}

# ----------------------------------------------------------------------
#  Simple class definition
# ----------------------------------------------------------------------
test basic-1.1 {define a simple class} {
    class Counter {
        constructor {args} {
            incr num
            eval configure $args
        }
        destructor {
            incr num -1
        }

        method ++ {} {
            return [incr val $by]
        }
        proc num {} {
            return $num
        }
        public variable by 1
        protected variable val 0
        private common num 0
    }
} ""

test basic-1.2 {class is now defined} {
    info classes Counter
} {Counter}

test basic-1.3 {access command exists with class name} {
    info which -command Counter
} {::Counter}

test basic-1.4 {create a simple object} {
    Counter x
} {x}

test basic-1.5a {object names cannot be duplicated} {
    list [catch "Counter x" msg] $msg
} {1 {command "x" already exists in namespace "::"}}

test basic-1.5b {built-in commands cannot be clobbered} {
    list [catch "Counter info" msg] $msg
} {1 {command "info" already exists in namespace "::"}}

test basic-1.6 {objects have an access command} {
    info which x
} {::x}

test basic-1.7a {objects are added to the master list} {
    info objects x
} {x}

test basic-1.7b {objects are added to the master list} {
    info objects -class Counter x
} {x}

test basic-1.8 {objects can be deleted} {
    list [delete object x] [info which -command x]
} {{} {}}

test basic-1.9 {objects can be recreated with the same name} {
    Counter x
} {x}

# No hooks in tcl to make this work in a pure tcl world - sign :-(
#test basic-1.10 {objects can be destroyed by deleting their access command} {
#    rename ::x ""
#    info objects x
#} {}
delete object x
# ----------------------------------------------------------------------
#  #auto names
# ----------------------------------------------------------------------
test basic-2.1 {create an object with an automatic name} {
    Counter #auto
} {counter0}

test basic-2.2 {bury "#auto" within object name} {
    Counter x#autoy
} {xcounter1y}

test basic-2.3 {bury "#auto" within object name} {
    Counter a#aut#autob
} {a#autcounter2b}

test basic-2.4 {"#auto" is smart enough to skip names that are taken} {
    Counter counter3
    Counter #auto
} {counter4}

# ----------------------------------------------------------------------
#  Simple object use
# ----------------------------------------------------------------------
test basic-3.1 {object access command works} {
    Counter c
    list [c ++] [c ++] [c ++]
} {1 2 3}

test basic-3.2 {errors produce usage info} {
    list [catch "c xyzzy" msg] $msg
} {1 {bad option "xyzzy": must be one of ++, cget, configure, or isa}}

test basic-3.3 {built-in configure can query public variables} {
    c configure
} {{-by 1 1}}

test basic-3.4 {built-in configure can query one public variable} {
    c configure -by
} {-by 1 1}

test basic-3.5 {built-in configure can set public variable} {
    list [c configure -by 2] [c cget -by]
} {{} 2}

test basic-3.6 {configure actually changes public variable} {
    list [c ++] [c ++]
} {5 7}

test basic-3.7 {class procs can be accessed} {
    Counter::num
} {6}

test basic-3.8 {obsolete syntax is no longer allowed} {
    list [catch "Counter :: num" msg] $msg
} {1 {syntax "class :: proc" is an anachronism
[incr Tcl] no longer supports this syntax.
Instead, remove the spaces from your procedure invocations:
  Counter::num ?args?}}

# ----------------------------------------------------------------------
#  Classes can be destroyed and redefined
# ----------------------------------------------------------------------
test basic-4.1 {classes can be destroyed} {
    list [delete class Counter] \
         [info classes Counter] \
         [info namespace all Counter] \
         [info which Counter]
} {{} {} {} {}}

test basic-4.2 {classes can be redefined} {
    class Counter {
        method ++ {} {
            return [incr val $by]
        }
        public variable by 1
        protected variable val 0
    }
} {}

test basic-4.3 {the redefined class is actually different} {
    list [catch "Counter::num" msg] $msg
} {1 {invalid command name "Counter::num"}}

test basic-4.4 {objects can be created from the new class} {
    list [Counter #auto] [Counter #auto]
} {counter0 counter1}

test basic-4.5 {when a class is destroyed, its objects are deleted} {
    list [lsort [info objects counter*]] \
         [delete class Counter] \
         [lsort [info objects counter*]]
} {{counter0 counter1} {} {}}

# ----------------------------------------------------------------------
#  Global variables
# ----------------------------------------------------------------------
test basic-5.1 {define a simple class with global variables} {
    class test_globals {
        common g1 "global1"
        proc getval {name} {
            global $name
            return [set [info namespace tail $name]]
        }
        proc setval {name val} {
            global $name
            return [set [info namespace tail $name] $val]
        }
        method do {args} {
            return [eval $args]
        }
    }
    namespace eval test_globals {
        protected variable g2 "global2"
    }
} ""

test basic-5.2 {create an object for the tests} {
    test_globals #auto
} {test_globals0}

test basic-5.3 {common variables look like globals} {
    lsort [test_globals0 do info globals]
} {g1 g2}

test basic-5.4 {common variables can be referenced transparently} {
    list [catch {test_globals0 do set g1} msg] $msg
} {0 global1}

test basic-5.5 {ordinary global variables require a declaration} {
    list [catch {test_globals0 do set g2} msg] $msg
} {1 {can't read "g2": no such variable}}

test basic-5.6a {global command references variables within namespace} {
    list [catch {test_globals::getval g1} msg] $msg
} {0 global1}

test basic-5.6a {global command references variables within namespace} {
    list [catch {test_globals::getval g2} msg] $msg
} {0 global2}

test basic-5.7 {global command will find globals in other namespaces} {
    namespace eval :: {public variable test_global_0 "g0"}
    list [catch {test_globals::getval test_global_0} msg] $msg \
         [catch {test_globals::getval ::test_global_0} msg] $msg \
} {0 g0 0 g0}

test basic-5.8 {to create globals in a namespace, use the full path} {
    test_globals::setval ::test_global_1 g1
    namespace eval :: {lsort [info globals test_global_*]}
} {test_global_0 test_global_1}

test basic-5.9 {variable names can have ":" in them} {
    test_globals::setval ::test:global:2 g2
    namespace eval :: {info globals test:global:2}
} {test:global:2}

# ----------------------------------------------------------------------
#  Array variables
# ----------------------------------------------------------------------
test basic-6.1 {set up a class definition with array variables} {
    proc test_arrays_get {name} {
        upvar $name x
        set rlist {}
        foreach index [lsort [array names x]] {
            lappend rlist [list $index $x($index)]
        }
        return $rlist
    }
    class test_arrays {
        variable nums
        common undefined

        common colors
        set colors(red)   #ff0000
        set colors(green) #00ff00
        set colors(blue)  #0000ff

        constructor {} {
            set nums(one) 1
            set nums(two) 2
            set nums(three) 3

            set undefined(a) A
            set undefined(b) B
        }
        method do {args} {
            return [eval $args]
        }
    }
    test_arrays #auto
} {test_arrays0}

test basic-6.2 {test array access for instance variables} {
    lsort [test_arrays0 do array get nums]
} {1 2 3 one three two}

# DG: not sure why first argument has brackets but that is was Tcl8.6 and Tcl8.7 return
test basic-6.3 {test array access for commons} {
    lsort [test_arrays0 do array get colors]
} {{#0000ff} #00ff00 #ff0000 blue green red}

test basic-6.4 {test array access for instance variables via "upvar"} {
    test_arrays0 do test_arrays_get nums
} {{one 1} {three 3} {two 2}}

test basic-6.5 {test array access for commons via "upvar"} {
    test_arrays0 do test_arrays_get colors
} {{blue #0000ff} {green #00ff00} {red #ff0000}}

test basic-6.6a {test array access for commons defined in constructor} {
    lsort [test_arrays0 do array get undefined]
} {A B a b}

test basic-6.6b {test array access for commons defined in constructor} {
    test_arrays0 do test_arrays_get undefined
} {{a A} {b B}}

test basic-6.6c {test array access for commons defined in constructor} {
    list [test_arrays0 do set undefined(a)] [test_arrays0 do set undefined(b)]
} {A B}

test basic-6.7 {common variables can be unset} {
    test_arrays0 do unset undefined
    test_arrays0 do array names undefined
} {}

test basic-6.8 {common variables can be redefined} {
    test_arrays0 do set undefined "scalar"
} {scalar}
#
catch {delete class test_globals test_arrays}
