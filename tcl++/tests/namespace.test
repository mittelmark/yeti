#
# Tests for classes within namespaces
# ----------------------------------------------------------------------
#   AUTHOR:  Michael J. McLennan
#            Bell Labs Innovations for Lucent Technologies
#            mmclennan@lucent.com
#            http://www.tcltk.com/itcl
#            Detlef Groth, Caputh-Schwielowsee (2022, updated for Tcl 8.6)
#
#      RCS:  $Id: namespace.test,v 1.2 1998/09/04 19:10:58 matt Exp $
# ----------------------------------------------------------------------
#               Copyright (c) 1993-1996  Lucent Technologies
#                             2021       Detlef Groth, Germany 
# ======================================================================
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies and that
# both that the copyright notice and warranty disclaimer appear in
# supporting documentation, and that the names of Lucent Technologies
# any of their entities not be used in advertising or publicity
# pertaining to distribution of the software without specific, written
# prior permission.
#
# Lucent Technologies disclaims all warranties with regard to this
# software, including all implied warranties of merchantability and
# fitness.  In no event shall Lucent be liable for any special, indirect
# or consequential damages or any damages whatsoever resulting from loss
# of use, data or profits, whether in an action of contract, negligence
# or other tortuous action, arising out of or in connection with the use
# or performance of this software.
# ======================================================================

package require tcltest
namespace import tcltest::*
lappend auto_path ../..
package require tcl++

namespace eval itcl {
     namespace import -force ::tcl++::class
     namespace import -force ::tcl++::delete
}
package provide Itcl 3.0
proc untest {args} { }
#if {[string compare test [info procs test]] == 1} then {source defs}

# ----------------------------------------------------------------------
#  Classes within namespaces
# ----------------------------------------------------------------------
test namespace-1.1 {same class name can be used in different namespaces} {
    namespace eval test_ns_1 {
        class Counter {
            variable num 0
            method ++ {{by 1}} {
                incr num $by
            }
            common tag 1
        }
    }
    namespace eval test_ns_2 {
        class Counter {
            variable num 0
            method ++ {{by 2}} {
                if {$num == 0} {
                    set num 1
                } else {
                    set num [expr $num*$by]
                }
            }
            common tag 2
        }
    }
} ""

test namespace-1.2 {classes in different namespaces are different} {
    list [namespace eval test_ns_1::Counter {info variable tag}] \
         [namespace eval test_ns_2::Counter {info variable tag}] \
} {{protected common tag 1 1} {protected common tag 2 2}}

test namespace-1.3 {create an object in one namespace} {
    namespace eval test_ns_1 {
        list [Counter c] [c ++] [c ++] [c ++] [c ++]
    }
} {c 1 2 3 4}

test namespace-1.4 {create an object in another namespace} {
    namespace eval test_ns_2 {
        list [Counter c] [c ++] [c ++] [c ++] [c ++]
    }
} {c 1 2 4 8}

test namespace-1.5 {objects are reported with their full namespace path} {
    lsort [info objects *c]
} {test_ns_1::c test_ns_2::c}

#delete namespace ::test_ns_1 ::test_ns_2

tcltest::cleanupTests
